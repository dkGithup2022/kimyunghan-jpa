

1. jpa 의 xml 설정

1-1) xml 네임스페이스 & 퍼시스턴스 버전 지정
    < persistence xmlns="https://xmlns.jcp.org/xml/ns/persistence" version="2.1">

1-2) jpa 설정은 영속성 유닛부터 시작.
    영속성 유닛이란? 데이터 베이스 하나에 접근 하는 설정값의 모임 이라고 보면 됨. 이름으로 구분 가능함. 여기서는 name= "jpaBook" 이라고 할거임

    <persistence-unit name="jpaBook">

1-3) jpa 설정은
    javax.persistence.jdbc.driver = "org.h2.Database"
    javax.persistence.jdbc.url ="jdbc:h2:tcp://localhost/~/test"
    javax.persistence.jdbc.user ="sa"
    javax.persistence.jdbc.password =""

  하이버네이트 설정은
    hibernate.show_sql = true
    hibernate.format_sql = true
    hibernate.use_sql_comments = true
    hibernate.id.new_generator_mappings = true


****************************************************************************************************
<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.1"
             xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
    <persistence-unit name="jpaBook" >
        <properties>
            <property name="javax.persistence.jdbc.driver" value="org.h2.Driver" />
            <property name="javax.persistence.jdbc.url" value="jdbc:h2:tcp://localhost/~/test" />
            <property name="javax.persistence.jdbc.user" value="sa" />
            <property name="javax.persistence.jdbc.password" value="D" />

            <property name="hibernate.show_sql" value="true"/>
            <property name="hibernate.format_sql" value="true"/>
            <property name="hibernate.use_sql_comments" value="true"/>
            <property name="hibernate.id.new_generator_mappings" value="true"/>
        </properties>

    </persistence-unit>
</persistence>
****************************************************************************************************


1-4) 데이터 베이스 방언

    같은 sql 문을 여러 db 에 대해 수행할 수 없음.
    이유는 아래와 같음
        1. mysql은 varchar, 오라클은 varchar2
        2. 일반 rdb 는 substring(), 오라클은 subStr();
        3. 페이징은 mysql 은 limit 오라클은 rownum



2. 엔티티 매니저 사용하기

2-1) 생성 과정


    [Persistence] -조회-> [META-INF/persistence.xml]
    [Persistence] -생성-> [EntityManagerFactory] -생성-> [EntityManager]

2-2) 엔티티 메니저 팩토리 생성
    엔티티 매니저 생성위해 persistence.xml 설정정보를 먼저 세팅하고 부트 시에 읽을 수 있어야한다.
    자바 코드 상의 Persistence 객체가 그러면 EntityManagerFactory 를 생성할 수 있음.

    EntityManagerFactory emf = Persistence.createEntityManagerFactory("jpaBook");

    1) META-INF/persistence.xml 에서 jpaBook 에 관한 설정값 일어옴
    2) JPA 실행 위한 객체 생성
    3) (2) 단계 에서 종종 커넥션 풀도 미리 생성 (db 종류에 따라 다름)

    -> (1),(2),(3) 셋다 예삿일이 아니다. 즉,  EMF 를 만드는데 비용이 엄청 많이 들고
    -> EMF 는 프로그램 실행 중 한번만 실행되야 한다.


2-3) 엔티티 매니져

   EntityManager em = emf.createEntityManager();

   emf 에서 em 을 생성, jpa 의 대부분 기능은 em이 제공함.
   1) db 에 커넥션 유지
   2) CRUD 기능

   -> 프로그램 상에서는 데이터베이스와 통신하기 위해선 em 을 거쳐야 하고, em 을 통해 crud 하게됨.
   -> db 를 쓰고 싶으면 em 을 찾으면 됨.
   -> 근데 db와 통신함 == 커넥션을 관리함 ==> 쓰레드간에 공유 금지


2-4) 자원 반납
    em.close();
    emf.close();

    에러 처리시 트랜잭션이 끝나면 finally 블록에 항상 em.close();  를 추가해주자 .